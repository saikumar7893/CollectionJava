Collections Frameworks in java:
==============================

1. TreeSet---> where it is used to sort the data and the duplicates will be removed.

import java.util.*;
class Tree
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        TreeSet<Integer>set=new TreeSet<>();
        set.add(1);
        set.add(8);
         set.add(5);
        set.add(8);
        set.add(8);
        set.add(5);
        
        System.out.println(set);
    }
}
//output:
[1, 5, 8]

==================================================================================================================
2. HashSet---> It is used to remove the duplicates, But the Insertion order is not preserved.

import java.util.*;
class Tree
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        HashSet<String>set=new HashSet<>();
        set.add("saikumar");
        set.add("honey");
         set.add("saikumar");
        set.add("rahul");
       
        
        System.out.println(set);
    }
}
//Output:
[saikumar, rahul, honey]

======================================================================================================================
3. LinkedHashSet---> It is used to remove the duplicates, And the Insertion order is also preserved.

import java.util.*;
class Tree
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        LinkedHashSet<String>set=new LinkedHashSet<>();
        set.add("saikumar");
        set.add("honey");
         set.add("saikumar");
        set.add("rahul");
        System.out.println(set);
    }
}
//Output:
[saikumar, honey, rahul]

=========================================================================================================================
4. Queue--->It follows FIFO principle (first in first out principle) where it contains various types of methods like 
poll==> which is used to remove the remove and return the head of the element.
remove==>which is used to remove the element and return if it is empty it shows the exception.
peak()==>return the head of the element.
offer or add ==> which is used to the add the element

import java.util.*;
class Queueee
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        Queue q=new LinkedList<>();
        for(int i=0;i<10;i++)
        {
            q.offer(i);
        }
        System.out.println(q);
        System.out.println(q.remove());
        System.out.println(q.peek());
        System.out.println(q);
    }
}
//Output:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
0
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

===========================================================================================================================
5. Priority Queue==>The PriorityQueue is based on the priority heap. The elements of the priority queue are ordered according
 to the natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used. 

import java.util.*;
class Priority
{
    public static void main(String args[])
    {
        PriorityQueue<Integer>pq=new PriorityQueue<>();
        pq.offer(1);
        pq.offer(3);
        pq.offer(2);
        pq.offer(4);
        pq.offer(5);
        pq.offer(6);
        System.out.println(pq);
        System.out.println(pq.poll());
        System.out.println(pq);
        System.out.println(pq.peek());
        System.out.println(pq);
        System.out.println(pq.remove());
        System.out.println(pq);
        Iterator<Integer>it=pq.iterator();
        while(it.hasNext())
        {
            System.out.print(pq.poll()+" ");
        }
        
        
    }
}
//Output:
[1, 3, 2, 4, 5, 6]
1
[2, 3, 6, 4, 5]
2
[2, 3, 6, 4, 5]
2
[3, 4, 6, 5]
3 4 5 6 

===============================================================================================================================
6. Dequeue-->Double Ended Queue, itself states that the elements can be inserted or removed from both the ends like front and rear.
It can be implemented with the help of ArrayDequeue as well as the LinkedList.

import java.util.*;
class deck
{
    public static void main(String args[])
    {
        Deque<Integer>de=new ArrayDeque<>();
        de.add(1);
        de.addFirst(2);
        de.addLast(10);
        System.out.println(de);
        System.out.println(de.pollFirst());
         System.out.println(de);
         de.add(1);
        de.addFirst(2);
        de.addLast(10);
         System.out.println(de);
        System.out.println(de.peek());
    }
}
//Output:
[2, 1, 10]2[1, 10][2, 1, 10, 1, 10]2

============================================================================================================================





